<Project>

  <Target Name="ResolveRuntimeFilesFromLocalBuild">
    <Error Condition="!Exists('$(CoreCLRArtifactsPath)') and '$(RuntimeFlavor)' == 'CoreCLR'"
           Text="The CoreCLR artifacts path does not exist '$(CoreCLRArtifactsPath)'. The 'clr' subset must be built before building this project. Configuration: '$(CoreCLRConfiguration)'. To use a different configuration, specify the 'RuntimeConfiguration' property." />
    <Error Condition="!Exists('$(MonoArtifactsPath)') and '$(RuntimeFlavor)' == 'Mono'"
           Text="The Mono artifacts path does not exist '$(MonoArtifactsPath)'. The 'mono' subset must be built before building this project. Configuration: '$(MonoConfiguration)'. To use a different configuration, specify the 'RuntimeConfiguration' property." />

    <PropertyGroup Condition="'$(RuntimeFlavor)' == 'CoreCLR'">
      <CoreCLRArtifactsPath>$([MSBuild]::NormalizeDirectory('$(CoreCLRArtifactsPath)'))</CoreCLRArtifactsPath>
      <CoreCLRArtifactsPdbDir>$([MSBuild]::NormalizeDirectory('$(CoreCLRArtifactsPath)','PDB'))</CoreCLRArtifactsPdbDir>
      <!--
        Even though CoreCLRSharedFrameworkDir is statically initialized, set it again in case the
        value is different after CoreCLRArtifactsPath is normalized.
      -->
      <CoreCLRSharedFrameworkDir>$([MSBuild]::NormalizeDirectory('$(CoreCLRArtifactsPath)','sharedFramework'))</CoreCLRSharedFrameworkDir>
      <CoreCLRSharedFrameworkPdbDir>$([MSBuild]::NormalizeDirectory('$(CoreCLRSharedFrameworkDir)','PDB'))</CoreCLRSharedFrameworkPdbDir>
      <CoreCLRCrossTargetComponentDir
        Condition="'$(CoreCLRCrossTargetComponentDirName)' != ''">$([MSBuild]::NormalizeDirectory('$(CoreCLRArtifactsPath)','$(CoreCLRCrossTargetComponentDirName)','sharedFramework'))</CoreCLRCrossTargetComponentDir>
    </PropertyGroup>
    <PropertyGroup Condition="'$(RuntimeFlavor)' == 'Mono'">
      <MonoArtifactsPath>$([MSBuild]::NormalizeDirectory('$(MonoArtifactsPath)'))</MonoArtifactsPath>
    </PropertyGroup>

    <ItemGroup Condition="'$(RuntimeFlavor)' == 'CoreCLR'">
      <RuntimeFiles Include="$(CoreCLRSharedFrameworkDir)*.*" />
      <RuntimeFiles Condition="'$(PgoInstrument)' == 'true'" Include="$(CoreCLRSharedFrameworkDir)PGD/*" />
      <CoreCLRCrossTargetFiles Condition="'$(CoreCLRCrossTargetComponentDir)' != ''" Include="$(CoreCLRCrossTargetComponentDir)*.*" IsNative="true" />
      <RuntimeFiles>
        <IsNative>true</IsNative>
      </RuntimeFiles>
      <_systemPrivateCoreLib Include="$(CoreCLRArtifactsPath)System.Private.CoreLib.dll"
                             Condition="Exists('$(CoreCLRArtifactsPath)System.Private.CoreLib.dll')" />
      <_systemPrivateCoreLib Include="$(CoreCLRArtifactsPath)IL/System.Private.CoreLib.dll"
                             Condition="Exists('$(CoreCLRArtifactsPath)IL/System.Private.CoreLib.dll') and '@(_systemPrivateCoreLib)' == ''" />
      <RuntimeFiles Include="@(_systemPrivateCoreLib)" />
      <RuntimeFiles
        Include="
          $(CoreCLRSharedFrameworkPdbDir)*.pdb;
          $(CoreCLRSharedFrameworkPdbDir)*.dbg;
          $(CoreCLRSharedFrameworkPdbDir)*.dwarf" IsNative="true" />
      <RuntimeFiles Condition="Exists('$(CoreCLRArtifactsPdbDir)System.Private.CoreLib.pdb')"
        Include="$(CoreCLRArtifactsPdbDir)System.Private.CoreLib.pdb" />
      <RuntimeFiles Condition="Exists('$(CoreCLRArtifactsPdbDir)System.Private.CoreLib.ni.pdb')"
        Include="$(CoreCLRArtifactsPdbDir)System.Private.CoreLib.ni.pdb" />

      <CoreCLRCrossTargetFiles Condition="'$(CoreCLRCrossTargetComponentDir)' != ''"
        Include="
          $(CoreCLRSharedFrameworkPdbDir)*.pdb;
          $(CoreCLRSharedFrameworkPdbDir)*.dbg;
          $(CoreCLRSharedFrameworkPdbDir)*.dwarf" />

      <CoreCLRCrossTargetFiles>
        <TargetPath>runtime/$(CoreCLRCrossTargetComponentDirName)_$(TargetArchitecture)/native</TargetPath>
        <IsNative>true</IsNative>
      </CoreCLRCrossTargetFiles>
    </ItemGroup>
    <ItemGroup Condition="'$(RuntimeFlavor)' == 'Mono'">
      <RuntimeFiles Include="$(MonoArtifactsPath)\*.*" />
      <RuntimeFiles>
        <IsNative>true</IsNative>
      </RuntimeFiles>

      <FrameworkReleaseFiles Condition="'$(TargetsMacCatalyst)' == 'true' or '$(TargetsiOS)' == 'true' or '$(TargetstvOS)' == 'true'" Include="$(MonoArtifactsPath)\Mono.release.framework\*.*" />
      <FrameworkDebugFiles Condition="'$(TargetsMacCatalyst)' == 'true' or '$(TargetsiOS)' == 'true' or '$(TargetstvOS)' == 'true'" Include="$(MonoArtifactsPath)\Mono.debug.framework\*.*" />
      <MonoIncludeFiles Include="$(MonoArtifactsPath)\include\**\*.*" />
    </ItemGroup>

    <Error Condition="'@(RuntimeFiles)' == ''" Text="The '$(RuntimeFlavor)' subset must be built before building this project." />
  </Target>

  <Target Name="EnsureLocalArtifactsExist">
    <Error Condition="!Exists('$(LibrariesSharedFrameworkRefArtifactsPath)')"
           Text="The 'libs' subset must be built before building this project. Missing artifacts: $(LibrariesSharedFrameworkRefArtifactsPath). Configuration: '$(LibrariesConfiguration)'. To use a different configuration, specify the 'LibrariesConfiguration' property." />
    <Error Condition="'$(IncludeOOBLibraries)' == 'true' and !Exists('$(LibrariesAllRefArtifactsPath)')"
           Text="The 'libs' subset must be built before building this project. Missing artifacts: $(LibrariesAllRefArtifactsPath). Configuration: '$(LibrariesConfiguration)'. To use a different configuration, specify the 'LibrariesConfiguration' property." />
  </Target>

  <!--
    Ensure artifacts exist for the more advanced paths. If the configuration is '*', don't emit
    these errors: it isn't a local dev scenario.
  -->
  <Target Name="EnsureLocalOSGroupConfigurationArchitectureSpecificArtifactsExist"
          Condition="'$(LibrariesTargetOSConfigurationArchitecture)' != '*'">
    <Error Condition="!Exists('$(LibrariesSharedFrameworkBinArtifactsPath)')"
           Text="The 'libs' subset must be built before building this project. Missing artifacts: $(LibrariesSharedFrameworkBinArtifactsPath). Configuration: '$(LibrariesConfiguration)'. To use a different configuration, specify the 'LibrariesConfiguration' property." />
    <Error Condition="'$(IncludeOOBLibraries)' == 'true' and !Exists('$(LibrariesAllBinArtifactsPath)')"
           Text="The 'libs' subset must be built before building this project. Missing artifacts: $(LibrariesAllBinArtifactsPath). Configuration: '$(LibrariesConfiguration)'. To use a different configuration, specify the 'LibrariesConfiguration' property." />
    <Error Condition="!Exists('$(LibrariesNativeArtifactsPath)')"
           Text="The 'libs' subset must be built before building this project. Missing artifacts: $(LibrariesNativeArtifactsPath). Configuration: '$(LibrariesConfiguration)'. To use a different configuration, specify the 'LibrariesConfiguration' property." />
  </Target>

  <Target Name="ResolveLibrariesRefAssembliesFromLocalBuild"
          DependsOnTargets="EnsureLocalArtifactsExist">
    <ItemGroup>
      <LibrariesRefAssemblies Condition="'$(IncludeOOBLibraries)' != 'true'" Include="$(LibrariesSharedFrameworkRefArtifactsPath)*.dll;$(LibrariesSharedFrameworkRefArtifactsPath)*.pdb" />
      <LibrariesRefAssemblies Condition="'$(IncludeOOBLibraries)' == 'true'" Include="$(LibrariesAllRefArtifactsPath)*.dll;$(LibrariesAllRefArtifactsPath)*.pdb" />
    </ItemGroup>
    <Error Condition="'@(LibrariesRefAssemblies)' == ''" Text="The 'libs' subset must be built before building this project." />
  </Target>

  <Target Name="ResolveLibrariesRuntimeFilesFromLocalBuild"
          DependsOnTargets="
            EnsureLocalArtifactsExist;
            EnsureLocalOSGroupConfigurationArchitectureSpecificArtifactsExist">
    <ItemGroup>
      <LibrariesRuntimeFiles Condition="'$(IncludeOOBLibraries)' != 'true'" Include="
        $(LibrariesSharedFrameworkBinArtifactsPath)*.dll;
        $(LibrariesSharedFrameworkBinArtifactsPath)*.pdb"
        IsNative="" />
      <LibrariesRuntimeFiles Condition="'$(IncludeOOBLibraries)' == 'true'" Include="
        $(LibrariesAllBinArtifactsPath)*.dll;
        $(LibrariesAllBinArtifactsPath)*.pdb"
        IsNative="" />
      <ExcludeNativeLibrariesRuntimeFiles Condition="'$(IncludeOOBLibraries)' != 'true'"
                                          Include="$(LibrariesNativeArtifactsPath)libSystem.IO.Ports.Native.*" />
      <LibrariesRuntimeFiles Include="
        $(LibrariesNativeArtifactsPath)*.dll;
        $(LibrariesNativeArtifactsPath)*.dylib;
        $(LibrariesNativeArtifactsPath)*.a;
        $(LibrariesNativeArtifactsPath)*.so;
        $(LibrariesNativeArtifactsPath)*.dbg;
        $(LibrariesNativeArtifactsPath)*.dwarf;
        $(LibrariesNativeArtifactsPath)*.pdb"
        IsNative="true"
        Exclude="@(ExcludeNativeLibrariesRuntimeFiles)" />
      <LibrariesRuntimeFiles Condition="'$(TargetOS)' == 'Browser'"
                             Include="
        $(LibrariesNativeArtifactsPath)dotnet.js;
        $(LibrariesNativeArtifactsPath)dotnet.d.ts;
        $(LibrariesNativeArtifactsPath)dotnet-legacy.d.ts;
        $(LibrariesNativeArtifactsPath)package.json;
        $(LibrariesNativeArtifactsPath)dotnet.wasm;
        $(LibrariesNativeArtifactsPath)dotnet.js.symbols;
        $(LibrariesNativeArtifactsPath)dotnet.timezones.blat;
        $(LibrariesNativeArtifactsPath)*.dat;"
        IsNative="true" />
      <!-- for threaded wasm -->
      <LibrariesRuntimeFiles Condition="'$(TargetOS)' == 'Browser' and Exists('$(LibrariesNativeArtifactsPath)dotnet.worker.js')"
                             Include="
        $(LibrariesNativeArtifactsPath)dotnet.worker.js"
        IsNative="true" />
      <LibrariesRuntimeFiles Condition="'$(TargetOS)' == 'Browser'"
                             Include="
        $(LibrariesNativeArtifactsPath)src\*.c;
        $(LibrariesNativeArtifactsPath)src\*.js;
        $(LibrariesNativeArtifactsPath)src\emcc-default.rsp;
        $(LibrariesNativeArtifactsPath)src\emcc-link.rsp;
        $(LibrariesNativeArtifactsPath)src\emcc-props.json;"
        NativeSubDirectory="src"
        IsNative="true" />
      <LibrariesRuntimeFiles Condition="'$(TargetOS)' == 'Browser'"
                             Include="$(LibrariesNativeArtifactsPath)src\es6\*.js"
                             NativeSubDirectory="src\es6"
                             IsNative="true" />

      <LibrariesRuntimeFiles Condition="'$(TargetOS)' == 'Browser'"
                             Include="
        $(LibrariesNativeArtifactsPath)include\wasm\*.h;"
        NativeSubDirectory="include\wasm"
        IsNative="true" />
    </ItemGroup>

    <Error Condition="'@(LibrariesRuntimeFiles)' == ''" Text="The 'libs' subset must be built before building this project." />
  </Target>

  <Target Name="ResolveLibrariesFromLocalBuild"
          DependsOnTargets="
            ResolveLibrariesRefAssembliesFromLocalBuild;
            ResolveLibrariesRuntimeFilesFromLocalBuild" />

  <PropertyGroup>
    <BundledRuntimeIdentifierGraphFile>$(RuntimeIdGraphDefinitionFile)</BundledRuntimeIdentifierGraphFile>
  </PropertyGroup>
</Project>
